#http://localhost:5000/api/ui

openapi: 3.0.0

info:
  title: "RP Flask REST API"
  description: "An API for our Wolfcampus"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Acc:
      type: "object"
      required:
        - email
      properties:
        email:
          type: "string"
        password:
          type: "string"
    Usr:
      type: object
      properties:
        name:
          type: string
          example: John
        last_name:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    Pst:
      type: object
      properties:
        text:
          type: string
          example: Hello darkness my old friend
        photo:
          type: string
        status:
          type: integer
          format: int32
          example: 1
        date:
          type: string
          format: date-time
    Tkn:
      type: object
      properties:
        token:
          type: string
          example: 1234
        date:
          type: string
          format: date-time
  parameters:
    email:
      name: "email"
      description: "Email of the account to get"
      in: path
      required: True
      schema:
        type: "string"
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    

paths:
  /account:
    get:
      operationId: "account.read_all"
      tags:
        - "Account"
      summary: "Read the list of accounts"
      responses:
        "200":
          description: "Successfully read acc list"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - "Account"
      operationId: "account.validate"
      summary: "Validate an acc"
      requestBody:
          description: "Account to validate"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "acc"
                $ref: "#/components/schemas/Acc"
      responses:
        "204":
          description: "Successfully logged in acc"
        
  
  /account/{email}:
    get:
      operationId: "account.read_one"
      tags:
        - "Account"
      summary: "Read one account"
      parameters:
        - $ref: "#/components/parameters/email"
      responses:
        "200":
          description: "Successfully read acc"
    put:
      tags:
        - "Account"
      operationId: "account.update"
      summary: "Update an acc"
      parameters:
        - $ref: "#/components/parameters/email"
      responses:
        "200":
          description: "Successfully updated acc"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "account"
              $ref: "#/components/schemas/Acc"
    delete:
      tags:
        - "Account"
      operationId: "account.delete"
      summary: "Delete an acc"
      parameters:
        - $ref: "#/components/parameters/email"
      responses:
        "204":
          description: "Successfully deleted acc"

  /user:
    get:
      operationId: "user.read_all"
      tags:
        - "User"
      summary: "Read the list of all users"
      responses:
        "200":
          description: "Successfully read user list"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: "user.create"
      tags:
        - "User"
      summary: "Create a new acc"
      requestBody:
        description: "Account creation"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "usr"
              $ref: "#/components/schemas/Usr"
      responses:
        "201":
          description: "Successfully created user"

  /post:
    get:
      operationId: "post.read_all"
      tags:
        - "Post"
      summary: "Read the list of all posts"
      responses:
        "200":
          description: "Successfully read post list"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /userToken:
    get:
      operationId: "userToken.read_all"
      tags:
        - "Token"
      summary: "Token id for users?"
      responses:
        "200":
          description: "Successfully read token list"